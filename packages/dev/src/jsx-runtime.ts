import * as ReactDevRuntime from 'react/jsx-dev-runtime';

const isBrowser = typeof window !== 'undefined';
const isObjectLike = (value: unknown) => typeof value === 'object' && value !== null;

//we add a key on fragment so it will always have a fiber.
// with current react version (19) they don't have a fiber if there is no key and they are an only child.
const generateKeyForFragment = (
    type: React.ElementType,
    key: React.Key | undefined,
    source: ReactDevRuntime.JSXSource | undefined,
) => {
    if (type === ReactDevRuntime.Fragment && !key && source) {
        //to test if it is still needed add a component returning a fragment and see if the fragment has fiber
        return 'Autogenerated(' + source.fileName + ':' + source.lineNumber + ':' + source.columnNumber + ')';
    }
    return undefined;
};

const propsToSource = new WeakMap<object, ReactDevRuntime.JSXSource>();

const jsxDEVKeepSource: typeof ReactDevRuntime.jsxDEV = (type, props, key, isStatic, source, self) => {
    const elementKey = generateKeyForFragment(type, key, source) || key;

    const reactElement = ReactDevRuntime.jsxDEV(type, props, elementKey, isStatic, source, self);

    if (source && isObjectLike(reactElement.props)) {
        propsToSource.set(reactElement.props, source);
    }
    return reactElement;
};

// set on window for later inspection
if (isBrowser) {
    window.__propsToSource = propsToSource;
}

declare global {
    interface Window {
        __propsToSource: typeof propsToSource;
    }
}

export { Fragment, jsx, jsxs, type JSX } from 'react/jsx-runtime';
export { createElement } from 'react';
export const jsxDEV: typeof ReactDevRuntime.jsxDEV = isBrowser ? jsxDEVKeepSource : ReactDevRuntime.jsxDEV;
